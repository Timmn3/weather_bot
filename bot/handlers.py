from aiogram import Router, F, Dispatcher
from aiogram.types import Message, ContentType
from aiogram.filters import Command
import re

from config import settings
from weather.api_client import OpenWeatherClient
from weather.cache import WeatherCache, UserUnitsStore
from weather.formatting import format_weather_report
from bot.keyboards import location_request_kb

router = Router()

# in-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
cache = WeatherCache(ttl_seconds=settings.cache_ttl_seconds)
user_units = UserUnitsStore(default_units=settings.default_units)
client = OpenWeatherClient(api_key=settings.weather_api_key, lang=settings.openweather_lang)

@router.message(Command("start"))
async def cmd_start(message: Message) -> None:
    # –í–ê–ñ–ù–û: —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —É–≥–ª–æ–≤—ã–µ —Å–∫–æ–±–∫–∏ –∏–∑-–∑–∞ HTML parse_mode
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/weather &lt;–≥–æ—Ä–æ–¥&gt; ‚Äî –ø—Ä–∏–º–µ—Ä: <code>/weather Berlin</code>\n"
        "/celsius ‚Äî –≤—ã–≤–æ–¥ –≤ ¬∞C\n"
        "/fahrenheit ‚Äî –≤—ã–≤–æ–¥ –≤ ¬∞F\n\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:\n"
        "<code>55.7558, 37.6176</code> (–ú–æ—Å–∫–≤–∞)"
    )
    await message.answer(text, reply_markup=location_request_kb())

@router.message(Command("celsius"))
async def cmd_celsius(message: Message) -> None:
    user_units.set_units(message.from_user.id, "metric")
    await message.answer("–û–∫, —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞—é –≤ ¬∞C.")

@router.message(Command("fahrenheit"))
async def cmd_fahrenheit(message: Message) -> None:
    user_units.set_units(message.from_user.id, "imperial")
    await message.answer("–ì–æ—Ç–æ–≤–æ, —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞—é –≤ ¬∞F.")

@router.message(Command("weather"))
async def cmd_weather(message: Message) -> None:
    # –æ–∂–∏–¥–∞–µ–º /weather <–≥–æ—Ä–æ–¥>
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        await message.answer(
            "–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥: –Ω–∞–ø—Ä–∏–º–µ—Ä, <code>/weather Paris</code> –∏–ª–∏ <code>/weather Tokyo</code>."
        )
        return

    city = parts[1].strip()
    units = user_units.get_units(message.from_user.id)
    cache_key = ("city", city.lower(), units)

    cached = cache.get(cache_key)
    if cached:
        await message.answer(format_weather_report(cached, units))
        return

    try:
        report = await client.get_by_city(city=city, units=units)
    except Exception:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É üòî\n"
            "–ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: <code>/weather London</code>, <code>/weather New York</code>."
        )
        return

    cache.set(cache_key, report)
    await message.answer(format_weather_report(report, units))

@router.message(F.content_type == ContentType.LOCATION)
async def on_location(message: Message) -> None:
    if not message.location:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã üòî\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.\n"
            "–ò–ª–∏ –≤–≤–µ–¥–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>55.7558, 37.6176</code> (–ú–æ—Å–∫–≤–∞)\n"
            "<code>40.7128, -74.0060</code> (–ù—å—é-–ô–æ—Ä–∫)"
        )
        return

    lat, lon = message.location.latitude, message.location.longitude
    units = user_units.get_units(message.from_user.id)
    cache_key = ("coords", round(lat, 3), round(lon, 3), units)

    cached = cache.get(cache_key)
    if cached:
        await message.answer(format_weather_report(cached, units))
        return

    try:
        report = await client.get_by_coords(lat=lat, lon=lon, units=units)
    except Exception:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º üòî\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥:\n"
            "<code>/weather Paris</code>"
        )
        return

    cache.set(cache_key, report)
    await message.answer(format_weather_report(report, units))

# —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: "55.7558, 37.6176"
@router.message(F.text.regexp(r"^\s*-?\d+(?:\.\d+)?\s*,\s*-?\d+(?:\.\d+)?\s*$"))
async def manual_coords(message: Message) -> None:
    try:
        lat_str, lon_str = re.split(r",\s*", message.text.strip())
        lat, lon = float(lat_str), float(lon_str)
    except Exception:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã üòî\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>55.7558, 37.6176</code> (–ú–æ—Å–∫–≤–∞)\n"
            "<code>40.7128, -74.0060</code> (–ù—å—é-–ô–æ—Ä–∫)"
        )
        return

    units = user_units.get_units(message.from_user.id)
    cache_key = ("coords", round(lat, 3), round(lon, 3), units)

    cached = cache.get(cache_key)
    if cached:
        await message.answer(format_weather_report(cached, units))
        return

    try:
        report = await client.get_by_coords(lat=lat, lon=lon, units=units)
    except Exception:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º üòî\n"
        )
        return

    cache.set(cache_key, report)
    await message.answer(format_weather_report(report, units))

def setup_handlers(dp: Dispatcher) -> None:
    dp.include_router(router)
